{
  "name": "G-Cubed Build Switcher Development",
  "build": {
    "context": "..",
    "dockerfile": "./Dockerfile",
    "args": {
      "VARIANT": "1-3.12",
      "NODE_VERSION": "lts/*"
    }
  },
  "runArgs": [
        "--env-file",
        "${localWorkspaceFolder}/.devcontainer/customer-configuration.env"
    ],
  "containerEnv": {
    // Ensure that uv copies dependencies into the venvs - as otherwise venvs are linked from cache
    // which disappears when the container is rebuilt.
    // These are 'universal' configuration required by all versions of this devcontainer
    // Customer-specific configuration is found externally.  If you want to disable the auto
    // build switching for a customer/devcontainer, set any value for GCUBED_CODE_AUTO_BUILD_SWITCHER_DISABLED
    // (eg TRUE) in the customer-configuration.env file
    "UV_LINK_MODE": "copy",
    "GCUBED_ROOT": "${containerWorkspaceFolder}",
    "GCUBED_PYTHON_PREREQUISITES_REPO": "https://github.com/McKibbin-Software-Group/python-gcubed-prerequisites",
    "GCUBED_CODE_PACKAGE_NAME": "gcubed"
  },
  "portsAttributes": {
    "8888": {
      "label": "G-Cubed Online Charts",
      "onAutoForward": "openBrowser"
    },
    "9876": {
      "label": "G-Cubed venv helper",
      "onAutoForward": "ignore",
      "visibility": "private",
      "autoForwardPortsSource": "none"
    }
  },
  "features": {},
  "customizations": {
    "vscode": {
      "extensions": [
        // Ignore linter errors for the local vsix file - schema file simply does not include this pattern
        "/home/vscode/extensions/vscode-interpreter-switcher-0.1.0.vsix",
        "dbaeumer.vscode-eslint",
        "esbenp.prettier-vscode",
        "GitHub.copilot",
        "GitHub.copilot-chat",
        "GitHub.remotehub",
        "GitHub.vscode-pull-request-github",
        "gruntfuggly.todo-tree",
        "mechatroner.rainbow-csv",
        "mhutchie.git-graph",
        "ms-python.black-formatter",
        "ms-python.python",
        "ms-vsliveshare.vsliveshare",
        "tamasfe.even-better-toml"
        // The following are not required inside the devcontainer. Don't install them.
        // "ms-vscode-remote.vscode-remote-extensionpack",
        // "ms-vscode-remote.remote-ssh-explorer",
        // "ms-vscode.remote-repositories",
        // "ms-vscode.remote-containers",
        // "ms-vscode.remote-ssh",
        // "ms-vscode.remote-ssh-edit",
        // Speech runs on the local machine, not in the container.
        // "ms-vscode.vscode-speech",
      ],
      "settings": {
        "editor.defaultFormatter": "esbenp.prettier-vscode",
        "editor.detectIndentation": false,
        "editor.formatOnPaste": true,
        "editor.formatOnSave": false,
        "editor.formatOnType": true,
        "editor.insertSpaces": true,
        "editor.minimap.enabled": true,
        "editor.renderWhitespace": "trailing",
        "editor.renderControlCharacters": true,
        "editor.guides.indentation": true,
        "editor.renderLineHighlight": "all",
        "editor.renderFinalNewline": "on",
        "editor.rulers": [80, 120],
        "editor.tabSize": 2,
        "editor.wordWrap": "off",

        "files.eol": "\n",

        "git.autofetch": true,

        "python.defaultInterpreterPath": "/usr/local/bin/python",
        "python.linting.enabled": true,
        "python.linting.pylintEnabled": true,
        "python.formatting.provider": "black",
        "python.formatting.blackPath": "/usr/local/py-utils/bin/black",
        "python.linting.banditPath": "/usr/local/py-utils/bin/bandit",
        "python.linting.flake8Path": "/usr/local/py-utils/bin/flake8",
        "python.linting.mypyPath": "/usr/local/py-utils/bin/mypy",
        "python.linting.pycodestylePath": "/usr/local/py-utils/bin/pycodestyle",
        "python.linting.pydocstylePath": "/usr/local/py-utils/bin/pydocstyle",
        "python.linting.pylintPath": "/usr/local/py-utils/bin/pylint",

        "terminal.integrated.inheritEnv": true,
        "terminal.integrated.cwd": "${workspaceFolder}",
        "telemetry.telemetryLevel": "off",
        "workbench.startupEditor": "none",
        "workbench.colorTheme": "Default Dark Modern",
        "workbench.editorAssociations": {
          "README.md": "vscode.markdown.preview.editor"
        },

        "[javascript]": {
          "editor.defaultFormatter": "esbenp.prettier-vscode",
          "prettier.trailingComma": "es5",
          "prettier.semi": false,
          "prettier.tabWidth": 2,
          "prettier.printWidth": 120
        },
        "[html]": {
          "editor.defaultFormatter": "esbenp.prettier-vscode",
          "editor.wordWrap": "off"
        },
        "[css]": {
          "editor.defaultFormatter": "esbenp.prettier-vscode"
        },
        "[python]": {
          "editor.defaultFormatter": "ms-python.black-formatter",
          "files.trimTrailingWhitespace": true,
          "files.insertFinalNewline": true,
          "editor.rulers": [80, 120],
          "editor.tabSize": 2
        },
        // Don't show in vscode explorer. Files are still accessible via terminal, eg: 'code .devcontainer/devcontainer.json'
        "files.exclude": {
          "**/.git": true,
          "**/.svn": true,
          "**/.hg": true,
          "**/CVS": true,
          "**/.DS_Store": true,
          "**/Thumbs.db": true,
          "**/.devcontainer": true,
          "**/.github": true,
          "**/.vscode": true,
          "**/venv_gcubed*": true
        }
      }
    }
  },
  // Install any base prerequisites. Note - uv will install anything in requirements.txt to the system context. Assuming
  // this is needed in all cases.  Otherwise you should install requirements into the appropriate venv.
  // "postCreateCommand": "npm install && if [ -f requirements.txt ]; then sudo uv pip install --system -r requirements.txt; fi"
  "postCreateCommand": "if [ -f requirements.txt ]; then sudo $(which uv) pip install --system -r requirements.txt; fi; if [ -f pyproject.toml ]; then sudo $(which uv) pip install --system -r pyproject.toml; fi;echo 'alias ll=\"ls -alh\"' >> ~/.bashrc; echo 'cd() { if [ \"$#\" -eq 0 ]; then command cd \"${containerWorkspaceFolder}\"; else command cd \"$@\"; fi; }' >> ~/.bashrc"
}
